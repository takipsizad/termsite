"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const uuid_1 = __importDefault(require("uuid"));
const utils = __importStar(require("./utils.js"));
const defaultHost = 'https://authserver.mojang.com';
const Client = {
    /**
     * Attempts to authenticate a user.
     * @param  {Object}   options Config object
     * @param  {Function} cb      Callback
     */
    auth: async function (options) {
        if (options.token === null)
            delete options.token;
        else
            options.token = options.token ?? uuid_1.default.v4();
        options.agent = options.agent ?? 'Minecraft';
        return await utils.call(this?.host ?? defaultHost, 'authenticate', {
            agent: {
                name: options.agent,
                version: options.agent === 'Minecraft' ? 1 : options.version
            },
            username: options.user,
            password: options.pass,
            clientToken: options.token,
            requestUser: options.requestUser === true
        }, this?.agent);
    },
    /**
     * Refreshes a accessToken.
     * @param  {String}   accessToken Old Access Token
     * @param  {String}   clientToken Client Token
     * @param  {String=false}   requestUser Whether to request the user object
     * @param  {Function} cb     (err, new token, full response body)
     */
    refresh: async function (accessToken, clientToken, requestUser) {
        const data = await utils.call(this?.host ?? defaultHost, 'refresh', { accessToken, clientToken, requestUser: requestUser ?? false }, this?.agent);
        if (data.clientToken !== clientToken)
            throw new Error('clientToken assertion failed');
        return [data.accessToken, data];
    },
    /**
     * Validates an access token
     * @param  {String}   accessToken Token to validate
     * @param  {Function} cb    (error)
     */
    validate: async function (accessToken) {
        return await utils.call(this?.host ?? defaultHost, 'validate', { accessToken }, this?.agent);
    },
    /**
     * Invalidates all access tokens.
     * @param  {String}   username User's user
     * @param  {String}   password User's pass
     * @param  {Function} cb   (error)
     */
    signout: async function (username, password) {
        return await utils.call(this?.host ?? defaultHost, 'signout', { username, password }, this?.agent);
    }
};
Client.auth = utils.callbackify(Client.auth, 1);
Client.refresh = utils.callbackify(Client.refresh, 3);
Client.signout = utils.callbackify(Client.signout, 1);
Client.validate = utils.callbackify(Client.validate, 2);
module.exports = Client;
//# sourceMappingURL=Client.js.map