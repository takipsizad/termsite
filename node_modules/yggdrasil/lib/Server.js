"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const crypto_1 = require("crypto");
const utils_js_1 = __importDefault(require("./utils.js"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const defaultHost = 'https://sessionserver.mojang.com';
const Server = {
    /**
     * Client's Mojang handshake call
     * See http://wiki.vg/Protocol_Encryption#Client
     * @param  {String}   accessToken        Client's accessToken
     * @param  {String}   selectedProfile      Client's selectedProfile
     * @param  {String}   serverid     ASCII encoding of the server ID
     * @param  {String}   sharedsecret Server's secret string
     * @param  {String}   serverkey    Server's encoded public key
     * @param  {Function} cb           (is okay, data returned by server)
     * @async
     */
    join: async function (accessToken, selectedProfile, serverid, sharedsecret, serverkey) {
        return await utils_js_1.default.call(this?.host ??
            defaultHost, 'session/minecraft/join', {
            accessToken,
            selectedProfile,
            serverId: utils_js_1.default.mcHexDigest(crypto_1.createHash('sha1').update(serverid).update(sharedsecret).update(serverkey).digest())
        }, this?.agent);
    },
    /**
     * Server's Mojang handshake call
     * @param  {String}   username     Client's username, case-sensitive
     * @param  {String}   serverid     ASCII encoding of the server ID
     * @param  {String}   sharedsecret Server's secret string
     * @param  {String}   serverkey    Server's encoded public key
     * @param  {Function} cb           (is okay, client info)
     * @async
     */
    hasJoined: async function (username, serverid, sharedsecret, serverkey) {
        const host = this?.host ?? defaultHost;
        const hash = utils_js_1.default.mcHexDigest(crypto_1.createHash('sha1').update(serverid).update(sharedsecret).update(serverkey).digest());
        const data = await node_fetch_1.default(`${host}/session/minecraft/hasJoined?username=${username}&serverId=${hash}`, { agent: this?.agent, method: 'GET' });
        const body = JSON.parse(await data.text());
        if (body.id !== undefined)
            return body;
        else
            throw new Error('Failed to verify username!');
    }
};
Server.join = utils_js_1.default.callbackify(Server.join, 5);
Server.hasJoined = utils_js_1.default.callbackify(Server.hasJoined, 4);
module.exports = Server;
//# sourceMappingURL=Server.js.map